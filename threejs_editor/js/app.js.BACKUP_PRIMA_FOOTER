// ========================================
// MAIN APP - CON LOAD JSON + MODAL CHIEDI E MORE
// ========================================

import { PanoramaEngine } from './engine.js';
import { CameraControls } from './controls.js';
import { HotspotManager } from './hotspots.js';
import { UIManager } from './ui.js';
import { PreviewMode } from './preview.js';

class App {
 constructor() {
 this.engine = null;
 this.controls = null;
 this.hotspotManager = null;
 this.uiManager = null;
 this.previewMode = null;
 
 console.log('üé® VisualArte3D - Three.js Crossfade Editor');
 console.log('üì¶ Version: Modular 1.0 + JSON Loader');
 }
 
 init() {
 // Init UI Manager
 this.uiManager = new UIManager();
 this.uiManager.init();
 
 // Init Engine
 this.engine = new PanoramaEngine('canvas-container');
 
 // Init Controls
 this.controls = new CameraControls(
 this.engine.getCamera(),
 this.engine.getRenderer().domElement
 );
 
 // Init Hotspot Manager
 this.hotspotManager = new HotspotManager(
 this.engine.getScene(),
 this.engine.getCamera(),
 this.engine.getRenderer().domElement
 );
 
 // Init Preview Mode
 this.previewMode = new PreviewMode();
 
 // Setup event listeners
 this.setupEvents();
 
 // Load first image
 this.loadCurrentFoto();
 
 // Update loop for controls
 this.updateLoop();
 
 // AUTO-LOAD JSON DEMO
 this.loadDemoJSON();
 
 console.log('‚úÖ App initialized successfully!');
 }
 
 async loadDemoJSON() {
 try {
 console.log('üîç Tentativo caricamento JSON demo...');
 const response = await fetch('../media/esempio_percorso_con_contenuti.json');
 
 if (!response.ok) {
 console.log('‚ÑπÔ∏è JSON demo non trovato (normale se non ancora scaricati i media)');
 return;
 }
 
 const jsonData = await response.json();
 console.log('‚úÖ JSON demo caricato:', jsonData);
 
 // Crea percorso dall'JSON
 const nomePercorso = jsonData.nome || 'Tour Museo Demo';
 const result = this.uiManager.creaPercorso(nomePercorso);
 
 if (result.success) {
 // Carica punti e hotspot
 const percorso = this.uiManager.percorsiAttivi[nomePercorso];
 percorso.punti = jsonData.punti;
 percorso.hotspots = jsonData.hotspots;
 
 this.uiManager.percorsoCorrente = nomePercorso;
 this.uiManager.aggiornaListaPercorsi();
 
 console.log('üéâ Tour Museo caricato automaticamente!');
 console.log('üëÅÔ∏è Click su "üé¨ Play" per visualizzare!');
 
 // Mostra notifica
 setTimeout(() => {
 alert('üéâ Tour Museo caricato!\n\nüéµ Audio: 3 tracce classiche\nüóø Modelli 3D: 4 sculture Sketchfab\nüìù Testi: Info storiche\n\nüëÅÔ∏è Click "Play" per iniziare!');
 }, 1000);
 }
 
 } catch (error) {
 console.log('‚ÑπÔ∏è JSON demo non disponibile:', error.message);
 }
 }
 
 setupEvents() {
 // Foto select
 document.getElementById('fotoSelect').addEventListener('change', () => {
 this.uiManager.currentFoto = parseInt(document.getElementById('fotoSelect').value);
 this.loadCurrentFoto();
 });
 
 // Type buttons
 document.querySelectorAll('.type-btn').forEach(btn => {
 btn.addEventListener('click', (e) => {
 const tipo = e.target.id.replace('btn-', '');
 this.uiManager.tipoCorrente = tipo;
 document.querySelectorAll('.type-btn').forEach(b => b.classList.remove('active'));
 e.target.classList.add('active');
 });
 });
 
 // Click handler for adding hotspots
 this.controls.onClick((event) => {
 // Check if clicked on existing hotspot
 const hotspot = this.hotspotManager.checkIntersection(event);
 if (hotspot && hotspot.userData.type === 'incrocio') {
 // Navigate to target
 const targetFoto = hotspot.userData.data.targetFoto;
 if (targetFoto) {
 this.navigateToFoto(targetFoto);
 }
 return;
 }
 
 // Add new hotspot
 const raycaster = new THREE.Raycaster();
 const mouse = new THREE.Vector2();
 const rect = this.engine.getRenderer().domElement.getBoundingClientRect();
 mouse.x = ((event.clientX - rect.left) / rect.width) * 2 - 1;
 mouse.y = -((event.clientY - rect.top) / rect.height) * 2 + 1;
 
 raycaster.setFromCamera(mouse, this.engine.getCamera());
 const sphere = this.engine.getScene().children.find(obj => obj.geometry && obj.geometry.type === 'SphereGeometry');
 
 if (sphere) {
 const intersects = raycaster.intersectObject(sphere);
 if (intersects.length > 0) {
 this.addHotspot(intersects[0].point);
 }
 }
 });
 
 // Nuovo percorso
 document.querySelector('.new-route-section button').addEventListener('click', () => {
 const nome = document.getElementById('nomePercorso').value;
 const result = this.uiManager.creaPercorso(nome);
 if (result.success) {
 document.getElementById('nomePercorso').value = '';
 alert(`‚úÖ Percorso "${nome}" creato!`);
 } else {
 alert(`‚ùå ${result.error}`);
 }
 });
 
 // Aggiungi al percorso
 document.getElementById('addToRouteBtn').addEventListener('click', () => {
 const nome = document.getElementById('nomePunto').value;
 const desc = document.getElementById('descrizionePunto').value;
 const result = this.uiManager.aggiungiPunto(nome, desc);
 
 if (result.success) {
 document.getElementById('nomePunto').value = '';
 document.getElementById('descrizionePunto').value = '';
 
 const btn = document.getElementById('addToRouteBtn');
 const orig = btn.textContent;
 btn.style.background = '#4CAF50';
 btn.textContent = '‚úÖ AGGIUNTO!';
 setTimeout(() => {
 btn.style.background = '';
 btn.textContent = orig;
 }, 1500);
 } else {
 alert(`‚ùå ${result.error}`);
 }
 });
 
 // Route actions (delegated event)
 document.getElementById('listaPercorsi').addEventListener('click', (e) => {
 const btn = e.target.closest('button[data-action]');
 if (!btn) return;
 
 const action = btn.dataset.action;
 const nome = btn.dataset.name;
 
 switch(action) {
 case 'select':
 this.uiManager.percorsoCorrente = nome;
 this.uiManager.aggiornaListaPercorsi();
 break;
 case 'preview':
 // PREVIEW MODE IMPLEMENTATO!
 const percorso = this.uiManager.percorsiAttivi[nome];
 if (percorso && percorso.punti.length > 0) {
 this.previewMode.start(percorso);
 } else {
 alert('‚ö†Ô∏è Percorso vuoto!');
 }
 break;
 case 'save':
 const result = this.uiManager.esportaPercorso(nome);
 if (result.success) {
 alert('üíæ Percorso esportato!');
 } else {
 alert(`‚ùå ${result.error}`);
 }
 break;
 case 'delete':
 if (confirm(`Eliminare "${nome}"?`)) {
 this.uiManager.eliminaPercorso(nome);
 alert('üóëÔ∏è Eliminato!');
 }
 break;
 }
 });
 
 // Delete hotspot (delegated)
 document.getElementById('hotspotList').addEventListener('click', (e) => {
 if (e.target.classList.contains('delete-btn')) {
 const timestamp = parseInt(e.target.dataset.timestamp);
 this.uiManager.rimuoviHotspot(timestamp);
 this.reloadHotspots();
 }
 });
 
 // Reset
 document.querySelector('.reset-section button').addEventListener('click', () => {
 if (this.uiManager.reset()) {
 this.hotspotManager.clearAll();
 alert('üîÑ Reset completato!');
 }
 });
 
 // Modal INCROCIO confirm/cancel
 document.getElementById('btn-confirm-incrocio').addEventListener('click', () => {
 this.confirmHotspot();
 });
 
 document.getElementById('btn-cancel-incrocio').addEventListener('click', () => {
 this.cancelHotspot();
 });
 
 // Modal CHIEDI confirm/cancel
 document.getElementById('btn-confirm-chiedi').addEventListener('click', () => {
 this.confirmChiedi();
 });
 
 document.getElementById('btn-cancel-chiedi').addEventListener('click', () => {
 this.cancelChiedi();
 });
 
 // Modal MORE confirm/cancel
 document.getElementById('btn-confirm-more').addEventListener('click', () => {
 this.confirmMore();
 });
 
 document.getElementById('btn-cancel-more').addEventListener('click', () => {
 this.cancelMore();
 });
 
 // Modal 3D confirm/cancel
 document.getElementById('btn-confirm-3d').addEventListener('click', () => {
 this.confirm3d();
 });
 
 document.getElementById('btn-cancel-3d').addEventListener('click', () => {
 this.cancel3d();
 });
 
 // Preview close button
 document.getElementById('preview-close').addEventListener('click', () => {
 this.previewMode.close();
 });
 }
 
 loadCurrentFoto() {
 const filename = `../IMG_${String(this.uiManager.currentFoto).padStart(3, '0')}.jpg`;
 
 this.hotspotManager.clearAll();
 
 this.engine.loadTexture(filename, () => {
 this.reloadHotspots();
 });
 
 this.uiManager.aggiornaUI();
 }
 
 reloadHotspots() {
 this.hotspotManager.clearAll();
 const hotspots = this.uiManager.getHotspotsCorrente();
 
 hotspots.forEach(h => {
 const position = new THREE.Vector3(h.position.x, h.position.y, h.position.z);
 const mesh = this.hotspotManager.createHotspot(position, h.tipo, {
 timestamp: h.timestamp,
 targetFoto: h.targetFoto,
 targetName: h.targetName,
 content: h.content
 });
 });
 }
 
 addHotspot(position) {
 // Store pending position
 this.uiManager.pendingHotspot = { position: position };
 
 // Show appropriate modal based on type
 if (this.uiManager.tipoCorrente === 'incrocio') {
 document.getElementById('modalIncrocio').classList.add('active');
 } else if (this.uiManager.tipoCorrente === 'chiedi') {
 // Reset form
 document.getElementById('chiediVideoSelect').value = '';
 document.getElementById('chiediAudioSelect').value = '';
 document.querySelectorAll('#chiediImagesCheckboxes input').forEach(cb => cb.checked = false);
 // Show modal
 document.getElementById('modalChiedi').classList.add('active');
 } else if (this.uiManager.tipoCorrente === 'more') {
 // Reset form
 document.getElementById('moreTitleInput').value = '';
 document.getElementById('moreTextInput').value = '';
 document.getElementById('moreWikipediaInput').value = '';
 // Show modal
 document.getElementById('modalMore').classList.add('active');
 } else if (this.uiManager.tipoCorrente === 'tred') {
 // Reset form
 document.getElementById('tredTitleInput').value = '';
 document.getElementById('tredDescInput').value = '';
 document.getElementById('tredSketchfabInput').value = '';
 // Show modal
 document.getElementById('modal3d').classList.add('active');
 }
 }
 
 confirmHotspot() {
 const targetFoto = parseInt(document.getElementById('targetFotoSelect').value);
 if (!targetFoto) {
 alert('‚ö†Ô∏è Seleziona una foto!');
 return;
 }
 
 const position = this.uiManager.pendingHotspot.position;
 const hotspot = this.uiManager.aggiungiHotspot(position, targetFoto);
 
 const pos = new THREE.Vector3(position.x, position.y, position.z);
 this.hotspotManager.createHotspot(pos, 'incrocio', {
 timestamp: hotspot.timestamp,
 targetFoto: targetFoto,
 targetName: hotspot.targetName
 });
 
 document.getElementById('modalIncrocio').classList.remove('active');
 this.uiManager.pendingHotspot = null;
 }
 
 cancelHotspot() {
 document.getElementById('modalIncrocio').classList.remove('active');
 this.uiManager.pendingHotspot = null;
 }
 
 confirmChiedi() {
 const video = document.getElementById('chiediVideoSelect').value;
 const audio = document.getElementById('chiediAudioSelect').value;
 const gallery = [];
 document.querySelectorAll('#chiediImagesCheckboxes input:checked').forEach(cb => {
 gallery.push(cb.value);
 });
 
 if (!video && !audio && gallery.length === 0) {
 alert('‚ö†Ô∏è Seleziona almeno un contenuto!');
 return;
 }
 
 const position = this.uiManager.pendingHotspot.position;
 const hotspot = this.uiManager.aggiungiHotspot(position);
 
 // Salva content
 hotspot.content = {
 video: video,
 audio: audio,
 gallery: gallery
 };
 
 const pos = new THREE.Vector3(position.x, position.y, position.z);
 this.hotspotManager.createHotspot(pos, 'chiedi', {
 timestamp: hotspot.timestamp,
 content: hotspot.content
 });
 
 document.getElementById('modalChiedi').classList.remove('active');
 this.uiManager.pendingHotspot = null;
 }
 
 cancelChiedi() {
 document.getElementById('modalChiedi').classList.remove('active');
 this.uiManager.pendingHotspot = null;
 }
 
 confirmMore() {
 const titolo = document.getElementById('moreTitleInput').value.trim();
 const testo = document.getElementById('moreTextInput').value.trim();
 const wikipedia = document.getElementById('moreWikipediaInput').value.trim();
 
 if (!titolo && !testo) {
 alert('‚ö†Ô∏è Inserisci almeno un titolo o del testo!');
 return;
 }
 
 const position = this.uiManager.pendingHotspot.position;
 const hotspot = this.uiManager.aggiungiHotspot(position);
 
 // Salva content
 hotspot.content = {
 titolo: titolo,
 testo: testo,
 wikipedia: wikipedia
 };
 
 const pos = new THREE.Vector3(position.x, position.y, position.z);
 this.hotspotManager.createHotspot(pos, 'more', {
 timestamp: hotspot.timestamp,
 content: hotspot.content
 });
 
 document.getElementById('modalMore').classList.remove('active');
 this.uiManager.pendingHotspot = null;
 }
 
 cancelMore() {
 document.getElementById('modalMore').classList.remove('active');
 this.uiManager.pendingHotspot = null;
 }
 
 confirm3d() {
 const titolo = document.getElementById('tredTitleInput').value.trim();
 const testo = document.getElementById('tredDescInput').value.trim();
 const model3d = document.getElementById('tredSketchfabInput').value.trim();
 
 if (!titolo && !model3d) {
 alert('‚ö†Ô∏è Inserisci almeno un titolo o un URL modello!');
 return;
 }
 
 const position = this.uiManager.pendingHotspot.position;
 const hotspot = this.uiManager.aggiungiHotspot(position);
 
 // ‚úÖ FIX: Formato content per ContentModal con propriet√† 'type'
 // Estrai modelId dall'URL Sketchfab se presente
 let modelId = '';
 if (model3d) {
 // Supporta formati: https://sketchfab.com/models/abc123 o https://sketchfab.com/3d-models/name-abc123
 const match = model3d.match(/models\/([a-zA-Z0-9]+)/);
 if (match) {
 modelId = match[1];
 } else {
 // Se √® solo l'ID
 modelId = model3d;
 }
 }
 
 hotspot.content = {
 type: 'sketchfab',  // ‚úÖ Aggiunto type
 title: titolo,
 description: testo,
 modelId: modelId,
 url: model3d  // Mantieni anche l'URL completo
 };
 
 const pos = new THREE.Vector3(position.x, position.y, position.z);
 this.hotspotManager.createHotspot(pos, 'tred', {
 timestamp: hotspot.timestamp,
 content: hotspot.content
 });
 
 document.getElementById('modal3d').classList.remove('active');
 this.uiManager.pendingHotspot = null;
 
 console.log('‚úÖ Hotspot 3D creato:', hotspot.content);
 }
 
 cancel3d() {
 document.getElementById('modal3d').classList.remove('active');
 this.uiManager.pendingHotspot = null;
 }

 
 navigateToFoto(fotoNumero) {
 document.getElementById('fotoSelect').value = fotoNumero;
 this.uiManager.currentFoto = fotoNumero;
 this.loadCurrentFoto();
 }
 
 updateLoop() {
 requestAnimationFrame(() => this.updateLoop());
 this.controls.update();
 }
}

// Start app quando DOM pronto
window.addEventListener('DOMContentLoaded', () => {
 const app = new App();
 app.init();
 
 // Esponi app globalmente per debugging
 window.app = app;
});



